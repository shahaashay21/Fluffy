option optimize_for = SPEED;
option java_package = "pipe.common";

/**
 * the accompanying information for all messages. Provides origination,
 * security, authentication, and tracking information
 */
message Header {
    required int32 node_id = 1;
    required int64 time = 2;
    optional string source_host = 3 [default = ""];
    optional string destination_host = 4 [default = ""];
    //repeated VectorClock path = 5;

    optional int32 source = 7;

    // if the message is for a specific node, this will be set
    optional int32 destination = 8;

    // This factor limits the distance that a msg travels from the originating
    // node. Default (-1) is the whole network (not restricted).
    optional int32 max_hops = 10 [default = -1];
}

message Failure {
    required int32 id = 1;
    optional int32 ref_id = 2;
    optional string message = 3;
}
message File {
    optional int32 chunkId = 1;
    optional bytes data = 2;
    required string filename = 3;
    optional int32 totalNoOfChunks = 5; // total number of chunks of a requested file
}

enum RequestType {
    READ = 1;
    WRITE = 2;
    UPDATE = 3;
    DELETE = 4;
}

message Request {
    required string requestId = 4; // UUID which maps to a client request
    required RequestType requestType = 1; //READ for now
    oneof payload {
        string fileName = 2 ; // Will be Sent when requestType is READ/DELETE
        File file = 3; // Will be Sent when requestType is WRITE/UPDATE
    }
}

message Response {
    required string requestId = 6;// UUID which maps to a client request
    required RequestType requestType = 1; //READ for now
    optional bool success = 2; //true When requested action is successfully (READ for now)
    oneof payload {
        Failure failure = 3;
        File file = 4; //Will be sent When READ/DELETE is success
        string fileName = 5; //Will be sent When WRITE/UPDATE is success
    }
}


message Update {
    required bytes file = 2;
    required string file_name = 3;
}

message CommandMessage {
   required Header header = 1;

    oneof payload {
      // a client (external) sanity check for testing
      bool ping = 3;

      string message = 4;

      Failure err = 5;
   }
}
